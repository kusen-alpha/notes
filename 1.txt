GIL
GIL，(Global Interpreter Lock)，Cpython中全局解释锁，Python是一门解释型的编程语言，GIL是一把全局的大锁
GIL是一把在底层工作的锁，所有Python解释器的线程模型都逃不过

进程、线程：20210528170937.png

多线程面临的问题：为了能高效，多线程一般都会使用异步，异步的执行流程可能导致结果的不确定};
Python多线程所面临的问题：资源管理方式：资源引用计数。


Guido van Rossum--Python之父于1992年8月4日，在Python中引入了GIL;

GIL带来了：
GIL是在底层的一把锁，是bytecode字节码级别的互斥锁，保证同一时刻只有一个线程来控制Python解释器
GIL解决了Python中引用计数加锁的问题
GIL使得扩展的C库和Python程序融合时资源管理更容易

虽然有全局解释锁，但使用多线程时，一般还是需要加锁操作，因为变量是用户层的资源不是引用计数系统层资源。



多核时代的GIL
GIL在早期（单壳时代）解决了底层资源加锁问题（资源引用计数多线程安全性问题），在多核时代，GIL成为一种阻碍，无法进行充分利用多核的并行计算特性。
CPU从单核到多核，操作系统从并发到并行，单核不是真正物理意义上的同时执行，多核是。

CPU密集型处理：计算密集型，场景如密码破解、数据分析、大数据处理。
I/O密集型处理：I/O密集型，场景如下载文件、网络爬虫。Python多线程适合。

GUI存在的意义
单核时代，解决 资源引用计数安全性问题
IO密集型多线程有效提升效率
Python有很多C扩展，这些扩展很大程度上依赖GIL提供的安全解决方案，如果更改GIL需要重新解决这些库的安全性问题。

IO密集型情况下，大部分时间没有浪费在等待CPU时间片上，使用多线程比多进程更省资源。

突破GIL的方案
考虑其他语言实现的Python解释器。
使用C语言重写Python线程创建的过程。