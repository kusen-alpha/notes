多核时代的GIL
GIL在早期（单壳时代）解决了底层资源加锁问题（资源引用计数多线程安全性问题），在多核时代，GIL成为一种阻碍，无法进行充分利用多核的并行计算特性。
CPU从单核到多核，操作系统从并发到并行，单核不是真正物理意义上的同时执行，多核是。

CPU密集型处理：计算密集型，场景如密码破解、数据分析、大数据处理。
I/O密集型处理：I/O密集型，场景如下载文件、网络爬虫。Python多线程适合。

GUI存在的意义
单核时代，解决 资源引用计数安全性问题
IO密集型多线程有效提升效率
Python有很多C扩展，这些扩展很大程度上依赖GIL提供的安全解决方案，如果更改GIL需要重新解决这些库的安全性问题。

IO密集型情况下，大部分时间没有浪费在等待CPU时间片上，使用多线程比多进程更省资源。

突破GIL的方案
考虑其他语言实现的Python解释器。
使用C语言重写Python线程创建的过程。